{"version":3,"sources":["components/VerticalTypeCellMap.js","components/HorizontalTypeCell.js","components/TypeMultiplierCell.js","components/TypeChart.js","components/TypeCombo.js","components/TypeComboList.js","components/TypeField.js","components/EditTypesChartModal.js","presets/index.js","components/ImportTypeChartModal.js","components/ExportTypeChartModal.js","App.js","reportWebVitals.js","index.js"],"names":["DefendingTypeMap","typeLookup","typeName","index","style","width","textAlign","View","height","paddingLeft","backgroundColor","color","borderRadius","borderColor","borderWidth","transform","rotate","translateX","translateY","Text","whiteSpace","overflow","textOverflow","lineHeight","fontWeight","textShadow","paddingRight","HorizontalTypeCell","state","hovering","this","props","hoverable","setState","onClick","handleOnMouseClick","onMouseEnter","handleOnMouseHover","onMouseLeave","margin","opacity","cursor","rightAlign","type","React","Component","TypeMultiplierCell","editting","editValue","multiplierValue","edittable","e","newValue","target","value","toString","includes","select","onChange","keyCode","blur","linearValue","Math","log2","ratio","min","abs","partialHexComp","round","hexComp","length","Input","max","precision","autoFocus","onFocus","handleOnFocus","onBlur","handleOnBlur","onKeyDown","handleKeyPress","handleOnValueChange","defendingTypeNames","map","values","attackIndex","reduce","acc","currentVal","calculateBackgroundColor","mode","forceSingleModeWidth","handleOnClick","TypeChart","typesArr","types","innerIndex","onTypeMultiplierCellChange","Object","keys","paddingBottom","display","minWidth","fontSize","title","paddingTop","position","left","top","VerticalTypeCellMap","horizontalTypeMap","id","watermarkId","visibility","window","location","href","TypeCombo","containerRef","createRef","handleClickOutside","bind","isEditting","name","document","addEventListener","removeEventListener","event","current","contains","onEditted","isCancelled","newName","newTypes","filter","_","concat","Button","uniqueId","handleToggleEdit","float","UncontrolledTooltip","onDelete","typeArr","ListGroupItem","padding","ref","Row","Col","marginBottom","sm","InputGroup","handleNameChange","disabled","InputGroupAddon","addonType","handleTypeClick","Collapse","isOpen","marginLeft","marginRight","renderEditOrCancelButton","TypeComboList","hasChanges","typeCombos","onSendChanges","newTypeCombos","typeCombo","i","block","handleTypeComboAdd","className","handleTypeComboEditted","handleTypeComboDelete","TypeField","deletable","onTypeNameChange","invalid","errorMessage","onColorChange","placement","EditTypesChartModal","minTypeCount","editTitle","editTypes","oldName","newTitle","test","newColor","newEditTypes","isValid","uniqueNames","Set","has","add","push","onSubmit","Modal","modalVisibility","backdrop","toggle","onOpened","handleRefreshForm","ModalHeader","handleEditTitleNameChanged","ModalBody","ListGroup","flush","editType","handleEditTypeNameChanged","handleEditTypeColorChanged","handleEditTypeDelete","handleEditTypeAdd","marginTop","ModalFooter","handleEditTypesSubmit","Presets","ImportTypeChartModal","importFile","selectedPreset","importFileError","newSelectedPreset","importedData","hasOwnProperty","Error","typeNames","forEach","Array","isArray","every","isNaN","Number","onImport","files","file","fileReader","FileReader","onload","text","result","JSON","parse","handleImportdata","message","onerror","error","readAsText","Card","body","CardTitle","tag","CardText","handlePresetSelected","preset","accept","handleFileUpload","handleImportFromFile","ExportTypeChartModal","includeTypeCombos","checked","exportComponentAsPNG","typeChartImageRef","fileName","replaceAll","html2CanvasOptions","letterRendering","scale","onclone","clone","getElementById","console","log","exportData","note","blob","Blob","stringify","saveAs","handleExportAsPNG","handleCheckboxChange","Label","for","handleExportAsJSON","App","substring","indexOf","edit","import","export","info","modalName","prev","editTypesForm","defendIndex","oldAttackIndex","oldType","currentEditType","find","Navbar","dark","expand","NavbarBrand","navbar","Nav","NavItem","NavLink","handleModalToggle","NavbarText","handleTypeMultiplierCellChange","handleTypeComboListChanged","form","handleImport","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.37e3b87d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { View, Text } from 'react-native';\r\n\r\nfunction DefendingTypeMap(typeLookup, typeName, index) {\r\n    return (\r\n        <th key={index}><div style={{ width: '40px', textAlign: 'left' }}><View style={{ height: '40px', width: '80px', paddingLeft: '5px', backgroundColor: typeLookup[typeName].color, borderRadius: 10, borderColor: '#CED4DA', borderWidth: 'thin', transform: [{ rotate: \"270deg\" }, { translateX: 20 }, { translateY: -20 }] }}><Text style={{ height: '40px', width: '70px', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', lineHeight: '40px', fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', textAlign: 'left', paddingLeft: '2px', paddingRight: '2px' }}>{typeName}</Text></View></div></th>\r\n    );\r\n}\r\n\r\nexport default DefendingTypeMap;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, Text } from 'react-native';\r\n\r\nclass HorizontalTypeCell extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hovering: false\r\n        }\r\n    }\r\n\r\n    handleOnMouseHover(hovering) {\r\n        if (this.props.hoverable) {\r\n            this.setState((state) => {\r\n                state.hovering = hovering;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnMouseClick() {\r\n        if (this.props.hoverable) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View key={this.props.type} onClick={() => this.handleOnMouseClick()} onMouseEnter={() => this.handleOnMouseHover(true)} onMouseLeave={() => this.handleOnMouseHover(false)} style={{ margin: '0.3%', height: '40px', width: '80px', paddingLeft: '5px', backgroundColor: this.props.color, opacity: (this.props.opacity ? this.props.opacity : 1), borderRadius: 10, borderColor: '#CED4DA', borderWidth: 'thin', transform: [{ translateY: (this.state.hovering ? -2 : 0) }], cursor: (this.props.hoverable ? 'pointer' : '') }}><Text style={{ height: '40px', width: '70px', lineHeight: '40px', fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', textAlign: this.props.rightAlign ? 'right' : 'left', paddingLeft: '2px', paddingRight: '2px' }}>{this.props.type}</Text></View>\r\n        );\r\n    }\r\n}\r\n\r\nHorizontalTypeCell.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    opacity: PropTypes.number,\r\n    rightAlign: PropTypes.bool,\r\n    hoverable: PropTypes.bool,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default HorizontalTypeCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input } from 'reactstrap';\r\nimport { View } from 'react-native';\r\nimport { Textfit } from 'react-textfit';\r\n\r\n\r\nclass TypeMultiplierCell extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hovering: false,\r\n            editting: false,\r\n            editValue: 1\r\n        };\r\n    }\r\n\r\n    handleOnMouseHover(hovering) {\r\n        this.setState((state) => {\r\n            state.hovering = hovering;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleOnClick(multiplierValue) {\r\n        if (this.props.edittable) {\r\n            this.setState((state) => {\r\n                state.editting = true;\r\n                state.editValue = multiplierValue;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnValueChange(e) {\r\n        const newValue = e.target.value;\r\n        const valueString = newValue.toString();\r\n        if (!valueString.includes('-') && newValue >= 0) {\r\n            this.setState((state) => {\r\n                state.editValue = newValue;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnFocus(e) {\r\n        e.target.select();\r\n    }\r\n\r\n    handleOnBlur(e) {\r\n        this.props.onChange(e);\r\n        this.setState((state) => {\r\n            state.editting = false;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        // check for enter key press\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    calculateBackgroundColor(multiplierValue) {\r\n        if (multiplierValue === 0) {\r\n            return '#646464';\r\n        }\r\n        else if (multiplierValue === 1) {\r\n            return '#E6E6FA';\r\n        }\r\n        else {\r\n            const linearValue = Math.log2(multiplierValue);\r\n            const linearMax = 2;\r\n\r\n            const ratio = 1 - Math.min(Math.abs(linearValue), linearMax) / linearMax;\r\n            const partialHexComp = Math.round(ratio * 255).toString(16);\r\n            const hexComp = partialHexComp.length > 1 ? partialHexComp : ('0' + partialHexComp);\r\n            if (linearValue < 0) {\r\n                return '#' + hexComp + 'FF' + hexComp;\r\n            }\r\n            else {\r\n                return '#FF' + hexComp + hexComp;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.edittable && this.state.editting) {\r\n            return (\r\n                <td><View style={{ height: '40px', width: '40px' }}><Input type='number' min={0} max={99} precision={2} autoFocus onFocus={(e) => this.handleOnFocus(e)} onBlur={(e) => this.handleOnBlur(e)} onKeyDown={(e) => this.handleKeyPress(e)} onMouseEnter={() => this.handleOnMouseHover(true)} onMouseLeave={() => this.handleOnMouseHover(false)} style={{ height: '40px', width: '40px', lineHeight: '40px', textAlign: 'center', paddingLeft: '0', paddingRight: '0' }} value={this.state.editValue} onChange={(e) => this.handleOnValueChange(e)} /></View></td>\r\n            );\r\n        }\r\n        else {\r\n            const multiplierValue = this.props.defendingTypeNames.map((type) => this.props.typeLookup[type].values[this.props.attackIndex]).reduce((acc, currentVal) => acc * currentVal, 1);\r\n            const backgroundColor = this.calculateBackgroundColor(multiplierValue);\r\n            return (\r\n                <td><View onMouseEnter={() => this.handleOnMouseHover(true)} onMouseLeave={() => this.handleOnMouseHover(false)} style={{ height: '40px', width: '40px' }}><Textfit mode=\"single\" forceSingleModeWidth={false} max={20} onClick={() => this.handleOnClick(multiplierValue)} style={{ height: '40px', width: '40px', lineHeight: '40px', fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', backgroundColor: backgroundColor, borderRadius: ((this.props.edittable && this.state.hovering) ? 0 : 10), textAlign: 'center', cursor: (this.props.edittable ? 'pointer' : '')}}>{multiplierValue}</Textfit></View></td>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nTypeMultiplierCell.propTypes = {\r\n    defendingTypeNames: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    attackIndex: PropTypes.number.isRequired,\r\n    typeLookup: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    edittable: PropTypes.bool,\r\n    onChange: PropTypes.func\r\n};\r\n\r\nexport default TypeMultiplierCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, Text } from 'react-native';\r\nimport VerticalTypeCellMap from './VerticalTypeCellMap';\r\nimport HorizontalTypeCell from './HorizontalTypeCell';\r\nimport TypeMultiplierCell from './TypeMultiplierCell';\r\n\r\n\r\nclass TypeChart extends React.Component {\r\n    horizontalTypeMap(typesArr, typeName, index) {\r\n        return (\r\n            <tr key={typeName + index}>\r\n                <td>\r\n                    <HorizontalTypeCell type={typeName} color={this.props.types[typeName].color} rightAlign={true} />\r\n                </td>\r\n                {typesArr.map((typeName, innerIndex) => (<TypeMultiplierCell key={index + \"_\" + innerIndex} typeLookup={this.props.types} defendingTypeNames={[typesArr[innerIndex]]} attackIndex={index} edittable={true} onChange={(e) => this.props.onTypeMultiplierCellChange(e, typesArr[innerIndex], index)} />))}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const typesArr = Object.keys(this.props.types);\r\n\r\n        return (\r\n            <div>\r\n                <Text style={{ paddingBottom: '10px', display: 'inherit', textAlign: 'center', width: 0, minWidth: '100%', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', fontSize: 'x-large', fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF' }}>{this.props.title}</Text>\r\n                <div style={{ paddingLeft: '115px' }}>\r\n                    <h6>\r\n                        <Text style={{ fontSize: 20, fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', }}>\r\n                            Defending Type\r\n                        </Text>\r\n                    </h6>\r\n                    <View style={{ paddingTop: '40px', transform: [{ translateX: -40 }] }}>\r\n                        <View style={{ position: 'absolute', left: 'auto', paddingTop: '45px', top: '50%', transform: [{ rotate: '270deg' }, {translateY: '-115px'}] }}>\r\n                            <h6>\r\n                                <Text style={{ fontSize: 20, fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', }}>\r\n                                    Attacking Type\r\n                                </Text>\r\n                            </h6>\r\n                        </View>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <td />\r\n                                    {typesArr.map((typeName, index) => VerticalTypeCellMap(this.props.types, typeName, index))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {typesArr.map((typeName, index) => this.horizontalTypeMap(typesArr, typeName, index))}\r\n                            </tbody>\r\n                        </table>\r\n                    </View>\r\n                </div>\r\n                <div id={this.props.watermarkId} style={{ visibility: 'hidden' }}>\r\n                    <Text style={{ paddingTop: '30px', paddingRight: '2px', paddingBottom: '2px', fontSize: '10px', display: 'block', textAlign: 'end' }}>Made with TypeCharts ({window.location.href})</Text>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTypeChart.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    types: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    onTypeMultiplierCellChange: PropTypes.func.isRequired,\r\n    watermarkId: PropTypes.string\r\n}\r\n\r\nexport default TypeChart;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, Row, Col, ListGroupItem, Button, Collapse, InputGroupAddon, InputGroup, UncontrolledTooltip } from 'reactstrap';\r\nimport VerticalTypeCellMap from './VerticalTypeCellMap';\r\nimport TypeMultiplierCell from './TypeMultiplierCell';\r\nimport HorizontalTypeCell from './HorizontalTypeCell';\r\nimport { BsFillTrashFill } from 'react-icons/bs';\r\nimport { FaUndo } from 'react-icons/fa';\r\nimport { BiEditAlt } from 'react-icons/bi';\r\nimport { RiShieldFill, RiSwordFill } from 'react-icons/ri'\r\n\r\n\r\nclass TypeCombo extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.containerRef = React.createRef();\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n\r\n        this.state = { // TODO: state to track offense or defense analysis\r\n            isEditting: false,\r\n            name: '',\r\n            types: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    handleClickOutside(event) {\r\n        if (this.state.isEditting && this.containerRef && !this.containerRef.current.contains(event.target)) {\r\n            this.props.onEditted(this.state.name, this.state.types);\r\n            this.setState((state) => {\r\n                state.isEditting = false;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleToggleEdit(isCancelled = false) {\r\n        const isEditting = !this.state.isEditting;\r\n        if (!isEditting && !isCancelled) {\r\n            this.props.onEditted(this.state.name, this.state.types);\r\n        }\r\n        this.setState((state) => {\r\n            state.isEditting = isEditting;\r\n            if (isEditting) {\r\n                state.name = this.props.name;\r\n                state.types = this.props.types;\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        const newName = e.target.value;\r\n        this.setState((state) => {\r\n            state.name = newName;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleTypeClick(typeName) {\r\n        const newTypes = this.state.types.includes(typeName) ?\r\n            this.state.types.filter((_) => _ !== typeName) :\r\n            this.state.types.concat(typeName);\r\n\r\n        this.setState((state) => {\r\n            state.types = newTypes;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    renderEditOrCancelButton() {\r\n        if (this.state.isEditting) {\r\n            return (\r\n                <div>\r\n                    <Button id={this.props.uniqueId + \"deleteButton\"} color=\"danger\" onClick={() => this.handleToggleEdit(true)} style={{ margin: '2%', float: 'right', height: 'min-content' }}><FaUndo /></Button>\r\n                    <UncontrolledTooltip target={this.props.uniqueId + \"deleteButton\"}>Undo</UncontrolledTooltip>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <Button id={this.props.uniqueId + \"deleteButton\"} color=\"danger\" onClick={() => this.props.onDelete()} style={{ margin: '2%', float: 'right', height: 'min-content' }}><BsFillTrashFill /></Button>\r\n                    <UncontrolledTooltip target={this.props.uniqueId + \"deleteButton\"}>Delete</UncontrolledTooltip>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const typeArr = Object.keys(this.props.typeLookup);\r\n        return (\r\n            <ListGroupItem style={{ padding: 0 }}>\r\n                <div ref={this.containerRef} style={{ padding: '1%' }}>\r\n                    <div style={{ paddingTop: '1%', paddingBottom: '1%', paddingLeft: '3%', paddingRight: '3%' }}>\r\n                        <Row style={{ padding: 'inherit' }}>\r\n                            <Col style={{ paddingTop: '1%', paddingRight: '15%' }}>\r\n                                <Row style={{ marginBottom: '1%', paddingBottom: '2%' }}>\r\n                                    <Col sm={5} style={{ paddingLeft: 0, paddingRight: '1%', paddingBottom: '1%', paddingTop: '0.3%' }}>\r\n                                        <InputGroup>\r\n                                            <Input type=\"text\" value={this.state.isEditting ? this.state.name : this.props.name} onChange={(e) => this.handleNameChange(e)} disabled={!this.state.isEditting} />\r\n                                            <InputGroupAddon addonType=\"append\"><Button id={this.props.uniqueId + 'comboTypeButton'} color=\"secondary\"><RiShieldFill /></Button></InputGroupAddon>\r\n                                        </InputGroup>\r\n                                        <UncontrolledTooltip target={this.props.uniqueId + 'comboTypeButton'}>Analysis based on damage recieved as this Type Combo</UncontrolledTooltip>\r\n                                    </Col>\r\n                                    <Col sm={7}>\r\n                                        <Row>\r\n                                            {(this.state.isEditting ? this.state.types : this.props.types).map((typeName) => (<HorizontalTypeCell key={typeName} type={typeName} color={this.props.typeLookup[typeName].color} onClick={() => this.handleTypeClick(typeName)} hoverable={this.state.isEditting} />))}\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Collapse isOpen={this.state.isEditting}>\r\n                                    <Row style={{ marginLeft: '5%', marginRight: '5%', marginBottom: '2%', paddingTop: '2%' }}>\r\n                                        {Object.keys(this.props.typeLookup).map((typeName) => (<HorizontalTypeCell key={typeName} type={typeName} color={this.props.typeLookup[typeName].color} onClick={() => this.handleTypeClick(typeName)} opacity={this.state.types.includes(typeName) ? 0.25 : 1} hoverable={!this.state.types.includes(typeName)} />))}\r\n                                    </Row>\r\n                                </Collapse>\r\n                                <Row style={{ paddingTop: '1%', paddingBottom: '3%' }}>\r\n                                    <div style={{ paddingTop: '40px' }}>\r\n                                        <table>\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    {typeArr.map((typeName, index) => VerticalTypeCellMap(this.props.typeLookup, typeName, index))}\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    {typeArr.map((typeName, index) => (<TypeMultiplierCell key={typeName} typeLookup={this.props.typeLookup} defendingTypeNames={this.state.isEditting ? this.state.types : this.props.types} attackIndex={index} edittable={false} />))}\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                    </div>\r\n                                </Row>\r\n                            </Col>\r\n                            <div style={{ paddingTop: '1%', display: 'flex' }}>\r\n                                <Button id={this.props.uniqueId + \"editButton\"} color=\"info\" onClick={() => this.handleToggleEdit()} style={{ margin: '2%', float: 'right', height: 'min-content' }}><BiEditAlt /></Button>\r\n                                <UncontrolledTooltip target={this.props.uniqueId + \"editButton\"}>Edit</UncontrolledTooltip>\r\n                                {this.renderEditOrCancelButton()}\r\n                            </div>\r\n                        </Row>\r\n                    </div>\r\n                </div>\r\n            </ListGroupItem>\r\n            );\r\n    }\r\n}\r\n\r\nTypeCombo.propTypes = {\r\n    uniqueId: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    typeLookup: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    onEditted: PropTypes.func,\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nexport default TypeCombo;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport TypeCombo from './TypeCombo';\r\n\r\nclass TypeComboList extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.containerRef = React.createRef();\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n        this.hasChanges = false;\r\n\r\n        this.state = {\r\n            typeCombos: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    handleClickOutside(event) {\r\n        if (this.hasChanges && this.containerRef && !this.containerRef.current.contains(event.target)) {\r\n            const typeCombos = this.state.typeCombos;\r\n            this.hasChanges = false;\r\n            this.props.onSendChanges(typeCombos);\r\n            this.setState((state) => {\r\n                state.typeCombos = null;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleTypeComboAdd() {\r\n        const newTypeCombos = [{\r\n            name: '',\r\n            types: []\r\n        }].concat(this.hasChanges ? this.state.typeCombos : this.props.typeCombos);\r\n\r\n        this.hasChanges = true;\r\n\r\n        this.setState((state) => {\r\n            state.typeCombos = newTypeCombos;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleTypeComboEditted(index, name, types) {\r\n        const newTypeCombos = (this.hasChanges ? this.state.typeCombos : this.props.typeCombos).map((typeCombo, i) => {\r\n            if (i === index) {\r\n                return {\r\n                    name: name,\r\n                    types: types\r\n                };\r\n            }\r\n            else {\r\n                return typeCombo;\r\n            }\r\n        });\r\n\r\n        this.hasChanges = true;\r\n\r\n        this.setState((state) => {\r\n            state.typeCombos = newTypeCombos;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleTypeComboDelete(index) {\r\n        const newTypeCombos = (this.hasChanges ? this.state.typeCombos : this.props.typeCombos).filter((_, i) => i !== index);\r\n\r\n        this.hasChanges = true;\r\n\r\n        this.setState((state) => {\r\n            state.typeCombos = newTypeCombos;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.containerRef}>\r\n                <Button color=\"success\" block onClick={() => this.handleTypeComboAdd()} style={{ marginBottom: '1%' }}>New Type Combo</Button>\r\n                <div className=\"list-group\">\r\n                    {(this.hasChanges ? this.state.typeCombos : this.props.typeCombos).map((typeCombo, index) => (<TypeCombo key={index} uniqueId={'typeComboList' + index} typeLookup={this.props.typeLookup} name={typeCombo.name} types={typeCombo.types} onEditted={(name, types) => this.handleTypeComboEditted(index, name, types)} onDelete={() => this.handleTypeComboDelete(index)} />))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTypeComboList.propTypes = {\r\n    typeLookup: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    typeCombos: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        types: PropTypes.arrayOf(PropTypes.string).isRequired\r\n    })).isRequired,\r\n    onSendChanges: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TypeComboList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Input, ListGroupItem, Button, UncontrolledTooltip } from 'reactstrap';\r\nimport HorizontalTypeCell from './HorizontalTypeCell';\r\nimport { BsFillTrashFill } from 'react-icons/bs';\r\n\r\n\r\nfunction TypeField(props) {\r\n    return (\r\n        <ListGroupItem style={{ paddingLeft: '0%' }}>\r\n            <Row>\r\n                <Col sm={2} style={{ paddingLeft: '5%', visibility: (props.deletable ? 'visible' : 'hidden') }}><Button color=\"danger\" onClick={props.deletable ? props.onDelete : null}><BsFillTrashFill /></Button></Col>\r\n                <Col sm={6} style={{ paddingRight: '1%' }}><Input value={props.typeName} onChange={props.onTypeNameChange} invalid={props.errorMessage.length > 0} id={\"typeFieldId\" + props.uniqueId} /></Col>\r\n                <Col sm={1} style={{ paddingRight: 0, paddingLeft: '1%' }}><Input type=\"color\" value={props.color} onChange={props.onColorChange} style={{ padding: '5%', cursor: 'pointer' }} /></Col>\r\n                <Col sm={3} style={{ paddingLeft: '8%' }} ><HorizontalTypeCell type={props.typeName} color={props.color} /></Col>\r\n            </Row>\r\n            { props.errorMessage && props.errorMessage.length > 0 &&\r\n                <UncontrolledTooltip placement=\"bottom\" target={\"typeFieldId\" + props.uniqueId}>{props.errorMessage}</UncontrolledTooltip>\r\n            }\r\n        </ListGroupItem>\r\n    );\r\n}\r\n\r\nTypeField.propTypes = {\r\n    uniqueId: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    typeName: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    deletable: PropTypes.bool,\r\n    errorMessage: PropTypes.string,\r\n    onTypeNameChange: PropTypes.func,\r\n    onColorChange: PropTypes.func,\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nexport default TypeField;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, ListGroup } from 'reactstrap';\r\nimport TypeField from './TypeField';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nclass EditTypesChartModal extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.minTypeCount = 3;\r\n\r\n        this.state = {\r\n            editTitle: '',\r\n            editTypes: []\r\n        };\r\n    }\r\n\r\n    handleRefreshForm() {\r\n        const editTitle = this.props.title;\r\n        this.setState((state) => {\r\n            state.editTitle = editTitle;\r\n            state.editTypes = Object.keys(this.props.types).map((typeName) => {\r\n                return {\r\n                    oldName: typeName,\r\n                    newName: typeName,\r\n                    color: this.props.types[typeName].color,\r\n                    errorMessage: ''\r\n                }\r\n            });\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleEditTitleNameChanged(e) {\r\n        const newTitle = e.target.value;\r\n        this.setState((state) => {\r\n            state.editTitle = newTitle;\r\n            return state;\r\n        })\r\n    }\r\n\r\n    handleEditTypeNameChanged(e, index) {\r\n        const newName = e.target.value;\r\n\r\n        if (/^[a-zA-Z]/.test(newName) || newName.length <= 0) {\r\n            this.setState((state) => {\r\n                state.editTypes[index].newName = newName;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleEditTypeColorChanged(e, index) {\r\n        const newColor = e.target.value;\r\n\r\n        this.setState((state) => {\r\n            state.editTypes[index].color = newColor;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleEditTypeAdd() {\r\n        const newEditTypes = this.state.editTypes.concat({\r\n            oldName: '',\r\n            newName: '',\r\n            color: '#FFFFFF',\r\n            errorMessage: ''\r\n        });\r\n        this.setState((state) => {\r\n            state.editTypes = newEditTypes;\r\n            return state;\r\n        })\r\n    }\r\n\r\n    handleEditTypeDelete(index) {\r\n        if (this.state.editTypes.length > this.minTypeCount) {\r\n            const newEditTypes = this.state.editTypes.filter((_, i) => i !== index);\r\n            this.setState((state) => {\r\n                state.editTypes = newEditTypes;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleEditTypesSubmit() {\r\n        // validation for blank or duplicate names\r\n        const newEditTypes = [];\r\n        let isValid = true;\r\n        const uniqueNames = new Set();\r\n        for (let i = 0; i < this.state.editTypes.length; ++i) {\r\n            let errorMessage = '';\r\n            if (this.state.editTypes[i].newName.length <= 0) {\r\n                isValid = false;\r\n                errorMessage = 'Name cannot be blank';\r\n            } else if (uniqueNames.has(this.state.editTypes[i].newName)) {\r\n                isValid = false;\r\n                errorMessage = 'Type \"' + this.state.editTypes[i].newName + '\" already exists';\r\n            } else {\r\n                uniqueNames.add(this.state.editTypes[i].newName);\r\n            }\r\n            newEditTypes.push({\r\n                oldName: this.state.editTypes[i].oldName,\r\n                newName: this.state.editTypes[i].newName,\r\n                color: this.state.editTypes[i].color,\r\n                errorMessage: errorMessage\r\n            })\r\n        }\r\n        if (!isValid) {\r\n            this.setState((state) => {\r\n                state.editTypes = newEditTypes;\r\n                return state;\r\n            });\r\n        }\r\n        else {\r\n            this.props.onSubmit(this.state);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal isOpen={this.props.modalVisibility} backdrop=\"static\" toggle={() => this.props.toggle()} onOpened={() => this.handleRefreshForm()}>\r\n                <ModalHeader toggle={() => this.props.toggle()}>\r\n                    <Input id=\"title\" type=\"text\" onChange={(e) => this.handleEditTitleNameChanged(e)} value={this.state.editTitle} />\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <ListGroup flush>\r\n                        {this.state.editTypes.map((editType, index) => (<TypeField key={index} uniqueId={index} typeName={editType.newName} color={editType.color} deletable={this.state.editTypes.length > this.minTypeCount} errorMessage={editType.errorMessage} onTypeNameChange={(e) => this.handleEditTypeNameChanged(e, index)} onColorChange={(e) => this.handleEditTypeColorChanged(e, index)} onDelete={() => this.handleEditTypeDelete(index)} />))}\r\n                    </ListGroup>\r\n                    <Button color=\"success\" block onClick={() => this.handleEditTypeAdd()} style={{ marginTop: '2%' }}><FaPlus /></Button>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"success\" onClick={() => this.handleEditTypesSubmit()}>Save</Button>\r\n                    <Button color=\"danger\" onClick={() => this.props.toggle()}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nEditTypesChartModal.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    types: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    modalVisibility: PropTypes.bool.isRequired,\r\n    onSubmit: PropTypes.func.isRequired,\r\n    toggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default EditTypesChartModal;","import * as pokemon from './Pokemon.tych.json';\r\nimport * as temtem from './Temtem.tych.json';\r\n\r\nexport const Presets = [\r\n    pokemon.default,\r\n    temtem.default\r\n]","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, Card, CardTitle, CardText } from 'reactstrap';\r\nimport { Presets } from \"presets\";\r\n\r\n\r\nclass ImportTypeChartModal extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.importFile = null;\r\n\r\n        this.state = {\r\n            selectedPreset: 0,\r\n            importFileError: ''\r\n        };\r\n    }\r\n\r\n    handleRefreshForm() {\r\n        this.importFile = null;\r\n        this.setState((state) => {\r\n            state.importFileError = '';\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handlePresetSelected(e) {\r\n        const newSelectedPreset = e.target.value;\r\n        this.setState((state) => {\r\n            state.selectedPreset = newSelectedPreset;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleImportdata(importedData) {\r\n        // check for title\r\n        if (!importedData.hasOwnProperty(\"title\")) {\r\n            throw new Error('Missing or invalid title');\r\n        }\r\n        // check for types\r\n        else if (importedData.hasOwnProperty(\"types\")) {\r\n            const typeNames = Object.keys(importedData.types);\r\n            typeNames.forEach((typeName) => {\r\n                // check for valid type name\r\n                if (!/^[a-zA-Z]/.test(typeName)) {\r\n                    throw new Error('Invalid type: ' + typeName);\r\n                }\r\n                // check for valid object structure\r\n                else if (!(typeof importedData.types[typeName] === 'object' && importedData.types[typeName] !== null)) {\r\n                    throw new Error('Invalid or missing type body: ' + typeName);\r\n                }\r\n                // check for valid color\r\n                else if (!importedData.types[typeName].hasOwnProperty(\"color\") || !/^#[0-9A-Fa-f]{6}$/i.test(importedData.types[typeName].color)) {\r\n                    throw new Error('Invalid or missing color');\r\n                }\r\n                // check for valid values\r\n                else if (!(importedData.types[typeName].hasOwnProperty(\"values\") && Array.isArray(importedData.types[typeName].values) &&\r\n                    importedData.types[typeName].values.length === typeNames.length &&\r\n                    importedData.types[typeName].values.every((value) => !isNaN(value) && Number(value) >= 0))) {\r\n                    throw new Error('Invalid or missing values');\r\n                }\r\n            });\r\n            // check for typeCombos\r\n            if (importedData.hasOwnProperty(\"typeCombos\") && Array.isArray(importedData.typeCombos) &&\r\n                importedData.typeCombos.every((typeCombo) => typeof typeCombo === 'object' && typeCombo !== null &&\r\n                    typeCombo.hasOwnProperty(\"name\") &&\r\n                    typeCombo.hasOwnProperty(\"types\") && Array.isArray(typeCombo.types) && typeCombo.types.every((typeName) => typeNames.includes(typeName)))) {\r\n                // finally import data\r\n                this.props.onImport(importedData.title, importedData.types, importedData.typeCombos);\r\n                this.importFile = null;\r\n                this.setState((state) => {\r\n                    state.importFileError = \"\";\r\n                    return state;\r\n                });\r\n            }\r\n            else {\r\n                throw new Error('invalid or missing typeCombos');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Missing types');\r\n        }\r\n    }\r\n\r\n    handleFileUpload(e) {\r\n        this.importFile = e.target.files[0];\r\n        this.setState((state) => {\r\n            state.importFileError = \"\";\r\n            return state;\r\n        })\r\n    }\r\n\r\n    handleImportFromFile() {\r\n        if (!this.importFile) {\r\n            this.setState((state) => {\r\n                state.importFileError = \"You must upload a file to import!\";\r\n                return state;\r\n            })\r\n        }\r\n        else {\r\n            const file = this.importFile;\r\n            const fileReader = new FileReader();\r\n            fileReader.onload = (e) => {\r\n                const text = e.target.result;\r\n                try {\r\n                    // parse to JSON\r\n                    const importedData = JSON.parse(text);\r\n                    this.handleImportdata(importedData);\r\n                }\r\n                catch (e) {\r\n                    this.importFile = null;\r\n                    this.setState((state) => {\r\n                        state.importFileError = \"Error parsing file: \" + e.message;\r\n                        return state;\r\n                    })\r\n                }\r\n            }\r\n            fileReader.onerror = (e) => {\r\n                this.importFile = null;\r\n                this.setState((state) => {\r\n                    state.importFileError = \"Error reading file: \" + fileReader.error;\r\n                    return state;\r\n                });\r\n            }\r\n            try {\r\n                fileReader.readAsText(file, \"UTF-8\");\r\n            }\r\n            catch (e) {\r\n                this.importFile = null;\r\n                this.setState((state) => {\r\n                    state.importFileError = \"An unexpected error occurred. Please try again.\";\r\n                    return state;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal isOpen={this.props.modalVisibility} backdrop=\"static\" toggle={() => this.props.toggle()} onOpened={() => this.handleRefreshForm()}>\r\n                <ModalHeader toggle={() => this.props.toggle()}>\r\n                    Import Type Chart\r\n                    </ModalHeader>\r\n                <ModalBody>\r\n                    <Card body style={{ marginBottom: '2%' }}>\r\n                        <CardTitle tag=\"h4\">Import from Preset</CardTitle>\r\n                        <CardText>Import a premade type chart to view and customize.</CardText>\r\n                        <CardText>\r\n                            <Input type=\"select\" value={this.state.selectedPreset} onChange={(e) => this.handlePresetSelected(e)} style={{ width: '50%' }}>\r\n                                {Presets.map((preset, index) => (<option key={index} value={index}>{preset.title}</option>))}\r\n                            </Input>\r\n                        </CardText>\r\n                        <Button color=\"success\" onClick={() => this.handleImportdata(Presets[this.state.selectedPreset])}>Import</Button>\r\n                    </Card>\r\n                    <Card body>\r\n                        <CardTitle tag=\"h4\">Import from JSON</CardTitle>\r\n                        <CardText>Import a previously created type chart from a JSON file.</CardText>\r\n                        <CardText><Input type=\"file\" accept=\".tych.json\" onChange={(e) => this.handleFileUpload(e)} /><span style={{ color: '#FF0000', display: 'inline-block' }}>{this.state.importFileError}</span></CardText>\r\n                        <Button color=\"success\" onClick={() => this.handleImportFromFile()}>Import</Button>\r\n                    </Card>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"danger\" onClick={() => this.props.toggle()}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nImportTypeChartModal.propTypes = {\r\n    onImport: PropTypes.func.isRequired,\r\n    modalVisibility: PropTypes.bool.isRequired,\r\n    toggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ImportTypeChartModal;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, Card, CardTitle, CardText, Label } from 'reactstrap';\r\nimport { exportComponentAsPNG } from 'react-component-export-image';\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\nclass ExportTypeChartModal extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            includeTypeCombos: false\r\n        };\r\n    }\r\n\r\n    handleCheckboxChange(e) {\r\n        const checked = e.target.checked;\r\n        this.setState((state) => {\r\n            state.includeTypeCombos = checked;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleExportAsPNG() {\r\n        exportComponentAsPNG(this.props.typeChartImageRef, {\r\n            fileName: this.props.title.replaceAll(' ', '-'), html2CanvasOptions: {\r\n                letterRendering: true, scale: 2, backgroundColor: 'azure', onclone: (clone) => {\r\n                    clone.getElementById(this.props.watermarkId).style.visibility = \"visible\";\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleExportAsJSON() {\r\n        console.log('exporting as json');\r\n        const exportData = {\r\n            title: this.props.title,\r\n            types: this.props.types,\r\n            typeCombos: (this.state.includeTypeCombos ? this.props.typeCombos : []),\r\n            note: \"You can import this file to \" + window.location.href + \" to view its contents\"\r\n        }\r\n        const blob = new Blob([JSON.stringify(exportData)], { type: \"application/json;charset=utf-8\" });\r\n        saveAs(blob, this.props.title.replaceAll(' ', '-') + \".tych.json\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal isOpen={this.props.modalVisibility} backdrop=\"static\" toggle={() => this.props.toggle()}>\r\n                <ModalHeader toggle={() => this.props.toggle()}>\r\n                    Export Type Chart\r\n                    </ModalHeader>\r\n                <ModalBody>\r\n                    <Card body style={{ marginBottom: '2%' }}>\r\n                        <CardTitle tag=\"h4\">Export as PNG</CardTitle>\r\n                        <CardText>Export as an image to store or share. Note that PNGs cannot be imported to edit in the future.</CardText>\r\n                        <CardText />\r\n                        <Button color=\"success\" onClick={() => this.handleExportAsPNG()}>Export</Button>\r\n                    </Card>\r\n                    <Card body>\r\n                        <CardTitle tag=\"h4\">Export as JSON</CardTitle>\r\n                        <CardText>Export as metadata to store for later use. This file can be imported in the future to view and edit from this site.</CardText>\r\n                        <CardText><Input type=\"checkbox\" id=\"check\" onChange={(e) => this.handleCheckboxChange(e)} checked={this\r\n                            .includeTypeCombos} style={{ marginLeft: 'inherit' }} /><Label for=\"check\" style={{ marginLeft: '5%' }}>Include Type Combos</Label></CardText>\r\n                        <Button color=\"success\" onClick={() => this.handleExportAsJSON()}>Export</Button>\r\n                    </Card>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"danger\" onClick={() => this.props.toggle()}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nExportTypeChartModal.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    types: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    typeCombos: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        types: PropTypes.arrayOf(PropTypes.string).isRequired\r\n    })).isRequired,\r\n    typeChartImageRef: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.shape({\r\n            current: PropTypes.any\r\n        })\r\n    ]).isRequired,\r\n    modalVisibility: PropTypes.bool.isRequired,\r\n    toggle: PropTypes.func.isRequired,\r\n    watermarkId: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ExportTypeChartModal;","import 'App.css';\r\nimport React from 'react';\r\nimport { Row, Col, Button, Collapse, Navbar, NavbarBrand, Nav, NavItem, NavLink, NavbarText, Modal, ModalBody, UncontrolledTooltip } from 'reactstrap';\r\nimport { View } from 'react-native';\r\nimport TypeChart from 'components/TypeChart';\r\nimport TypeComboList from 'components/TypeComboList';\r\nimport EditTypesChartModal from 'components/EditTypesChartModal';\r\nimport ImportTypeChartModal from 'components/ImportTypeChartModal';\r\nimport ExportTypeChartModal from 'components/ExportTypeChartModal';\r\nimport { BiEditAlt } from 'react-icons/bi';\r\nimport { AiOutlineExport, AiOutlineImport } from 'react-icons/ai';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        if (window.location.href.includes('?')) {\r\n            window.location.href = window.location.href.substring(0, window.location.href.indexOf('?'));\r\n        }\r\n\r\n        this.typeChartImageRef = React.createRef();\r\n        this.watermarkId = \"TypeChartWatermark\";\r\n\r\n        this.state = {\r\n            modalVisibility: {\r\n                edit: false,\r\n                import: false,\r\n                export: false,\r\n                info: false\r\n            },\r\n            title: \"Sample\",\r\n            types: {\r\n                \"Melee\": {\r\n                    color: \"#c77b3d\",\r\n                    values: [1, 2, 0.5, 1, 1, 2, 0.5]\r\n                },\r\n                \"Ranged\": {\r\n                    color: \"#80fff6\",\r\n                    values: [0.5, 1, 2, 1, 1, 2, 0.5]\r\n                },\r\n                \"Armored\": {\r\n                    color: \"#bfbfbf\",\r\n                    values: [2, 0.5, 1, 1, 1, 2, 0.5]\r\n                },\r\n                \"Light\": {\r\n                    color: \"#f5ffff\",\r\n                    values: [1, 1, 1, 0.5, 2, 1, 1]\r\n                },\r\n                \"Dark\": {\r\n                    color: \"#3e1b55\",\r\n                    values: [1, 1, 1, 2, 0.5, 1, 1]\r\n                },\r\n                \"Magic\": {\r\n                    color: \"#ff38f8\",\r\n                    values: [1, 1, 1, 2, 2, 2, 1]\r\n                },\r\n                \"Hexproof\": {\r\n                    color: \"#e6ff6b\",\r\n                    values: [1, 1, 1, 0.5, 0.5, 0, 0.5]\r\n                }\r\n            },\r\n            typeCombos: [\r\n                {\r\n                    name: \"Paladin\",\r\n                    types: [\"Armored\", \"Light\", \"Hexproof\"]\r\n                },\r\n                {\r\n                    name: \"Fire Mage\",\r\n                    types: [\"Ranged\", \"Magic\"]\r\n                },\r\n                {\r\n                    name: \"Goblin Soldier\",\r\n                    types: [\"Dark\", \"Melee\"]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    handleTypeMultiplierCellChange(e, typeName, attackIndex) {\r\n        const newValue = e.target.value;\r\n        this.setState((state) => {\r\n            state.types[typeName].values[attackIndex] = newValue;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleModalToggle(modalName) {\r\n        const prev = this.state.modalVisibility[modalName];\r\n        this.setState((state) => {\r\n            state.modalVisibility[modalName] = !prev;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleEditTypesSubmit(editTypesForm) {\r\n        const newTitle = editTypesForm.editTitle;\r\n        // construct type chart and fix any new type refs\r\n        const newTypes = {};\r\n        for (let defendIndex = 0; defendIndex < editTypesForm.editTypes.length; ++defendIndex) {\r\n            newTypes[editTypesForm.editTypes[defendIndex].newName] = {\r\n                color: editTypesForm.editTypes[defendIndex].color,\r\n                values: []\r\n            };\r\n            for (let attackIndex = 0; attackIndex < editTypesForm.editTypes.length; ++attackIndex) {\r\n                if (editTypesForm.editTypes[defendIndex].oldName.length <= 0 || editTypesForm.editTypes[attackIndex].oldName.length <= 0) {\r\n                    newTypes[editTypesForm.editTypes[defendIndex].newName].values.push(1);\r\n                }\r\n                else {\r\n                    const oldAttackIndex = Object.keys(this.state.types).indexOf(editTypesForm.editTypes[attackIndex].oldName);\r\n                    newTypes[editTypesForm.editTypes[defendIndex].newName].values.push(this.state.types[editTypesForm.editTypes[defendIndex].oldName].values[oldAttackIndex]);\r\n                }\r\n            }\r\n        }\r\n        // update refs for type combos, and remove refs to deleted types\r\n        const newTypeCombos = [];\r\n        for (let i = 0; i < this.state.typeCombos.length; ++i) {\r\n            const typeCombo = {\r\n                name: this.state.typeCombos[i].name,\r\n                types: []\r\n            };\r\n            this.state.typeCombos[i].types.forEach((oldType) => {\r\n                const currentEditType = editTypesForm.editTypes.find((editType) => editType.oldName === oldType);\r\n                if (currentEditType) {\r\n                    typeCombo.types.push(currentEditType.newName);\r\n                }\r\n            });\r\n            newTypeCombos.push(typeCombo);\r\n        }\r\n        this.setState((state) => {\r\n            state.title = newTitle;\r\n            state.types = newTypes;\r\n            state.typeCombos = newTypeCombos;\r\n            state.modalVisibility.edit = false;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleTypeComboListChanged(typeCombos) {\r\n        this.setState((state) => {\r\n            state.typeCombos = typeCombos;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleImport(title, types, typeCombos) {\r\n        this.setState((state) => {\r\n            state.title = title;\r\n            state.types = types;\r\n            state.typeCombos = typeCombos;\r\n            state.modalVisibility.import = false;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Navbar color=\"dark\" dark expand=\"md\">\r\n                    <NavbarBrand>TypeCharts</NavbarBrand>\r\n                    <Collapse navbar>\r\n                        <Nav className=\"mr-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink onClick={() => this.handleModalToggle('info')} style={{ cursor: 'pointer' }}>Info</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink href=\"https://github.com/mlaikhram/type-chart-builder\" target=\"_blank\">GitHub</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <NavbarText>Made by Matthew Laikhram</NavbarText>\r\n                    </Collapse>\r\n                </Navbar>\r\n                <div className=\"container-fluid\">\r\n                    <Row style={{ paddingTop: '40px' }}>\r\n                        <Col style={{ paddingLeft: '3%', paddingBottom: '5%' }}>\r\n                            <Row>\r\n                                <TypeChart ref={this.typeChartImageRef} title={this.state.title} types={this.state.types} onTypeMultiplierCellChange={(e, typeName, attackIndex) => this.handleTypeMultiplierCellChange(e, typeName, attackIndex)} watermarkId={this.watermarkId} />\r\n                            </Row>\r\n                            <View style={{ display: 'inherit', transform: [{translateY: '-40px'}] }}>\r\n                                <Row style={{ paddingLeft: '75px' }}>\r\n                                    <Button id=\"editButton\" color=\"info\" onClick={() => this.handleModalToggle('edit')} style={{ margin: '0.2%' }}><BiEditAlt /></Button>\r\n                                    <UncontrolledTooltip target=\"editButton\">Edit</UncontrolledTooltip>\r\n                                    <Button id=\"importButton\" color=\"primary\" onClick={() => this.handleModalToggle('import')} style={{ margin: '0.2%' }}><AiOutlineImport /></Button>\r\n                                    <UncontrolledTooltip target=\"importButton\">Import</UncontrolledTooltip>\r\n                                    <Button id=\"exportButton\" color=\"success\" onClick={() => this.handleModalToggle('export')} style={{ margin: '0.2%' }}><AiOutlineExport /></Button>\r\n                                    <UncontrolledTooltip target=\"exportButton\">Export</UncontrolledTooltip>\r\n                                </Row>\r\n                            </View>\r\n                        </Col>\r\n                        <Col>\r\n                            <TypeComboList typeLookup={this.state.types} typeCombos={this.state.typeCombos} onSendChanges={(typeCombos) => this.handleTypeComboListChanged(typeCombos)} />\r\n                        </Col>\r\n                    </Row>\r\n                    <EditTypesChartModal title={this.state.title} types={this.state.types} modalVisibility={this.state.modalVisibility.edit} toggle={() => this.handleModalToggle('edit')} onSubmit={(form) => this.handleEditTypesSubmit(form)} />\r\n                    <ImportTypeChartModal onImport={(title, types, typeCombos) => this.handleImport(title, types, typeCombos)} modalVisibility={this.state.modalVisibility.import} toggle={() => this.handleModalToggle('import')} />\r\n                    <ExportTypeChartModal title={this.state.title} types={this.state.types} typeCombos={this.state.typeCombos} typeChartImageRef={this.typeChartImageRef} modalVisibility={this.state.modalVisibility.export} toggle={() => this.handleModalToggle('export')} watermarkId={this.watermarkId} />\r\n                    <Modal isOpen={this.state.modalVisibility.info} toggle={() => this.handleModalToggle('info')}>\r\n                        <ModalBody>\r\n                            <h5>What is TypeCharts?</h5>\r\n                            <p>\r\n                                Typecharts is a sandbox for gamers and designers to experiment with Type Charts \r\n                                and type combinations either for existing games or for the purpose of building \r\n                                a game that utilizes the Type Chart as a combat mechanic.\r\n                            </p>\r\n                            <h5>What can I do in TypeCharts?</h5>\r\n                            <p>\r\n                                TypeCharts allows you to customize your Type Chart by editting the values directly \r\n                                in each cell and by using the various options listed below:\r\n                            </p>\r\n                            <ul>\r\n                                <li>\r\n                                    <BiEditAlt /><b>Edit:</b> Modify the title and types displayed in the Type Chart\r\n                                </li>\r\n                                <li>\r\n                                    <AiOutlineImport /><b>Import:</b> Load an existing Type Chart from one of the presets\r\n                                    available, or from a previously exported file\r\n                                </li>\r\n                                <li>\r\n                                    <AiOutlineExport /><b>Export:</b> Save your Type Chart as an image or as a tych.json\r\n                                    file, which can be re-imported for later use\r\n                                </li>\r\n                            </ul>\r\n                            <p>\r\n                                With TypeCharts, you can also test out your creation by adding Type Combos using\r\n                                the <b>New Type Combo</b> button. Each Type Combo allows you to add a name and one \r\n                                or more types, which it will then use to calculate your combo's stats. This can help \r\n                                you determine which type combos are best for your strategy, or in a designer's case \r\n                                it could help determine if your type chart needs tweaking based on under/overtuned \r\n                                combinations.\r\n                            </p>\r\n                            <h5>Upcoming Features</h5>\r\n                            <p>\r\n                                While TypeCharts is currently geared toward defensive typing analysis, there are \r\n                                plans to implement a feature for analysing offensive type combinations as well. \r\n                                Look out for more updates on that!\r\n                            </p>\r\n                            <p>\r\n                                There are also various QoL updates being looked into, including a visual indicator to \r\n                                help more quickly determine which two types intersect with the Type Chart cell you are \r\n                                currently hovering over.\r\n                            </p>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}