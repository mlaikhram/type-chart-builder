{"version":3,"sources":["components/VerticalTypeCellMap.js","components/HorizontalTypeCell.js","components/TypeMultiplierCell.js","components/TypeChart.js","components/TypeCombo.js","components/TypeComboList.js","components/TypeField.js","components/EditTypesChartModal.js","presets/index.js","components/ImportTypeChartModal.js","components/ExportTypeChartModal.js","App.js","reportWebVitals.js","index.js"],"names":["DefendingTypeMap","typeLookup","typeName","index","style","width","textAlign","View","height","paddingLeft","backgroundColor","color","borderRadius","borderColor","borderWidth","transform","rotate","translateX","translateY","Text","whiteSpace","overflow","textOverflow","lineHeight","fontWeight","textShadow","paddingRight","HorizontalTypeCell","state","hovering","this","props","hoverable","setState","onClick","handleOnMouseClick","onMouseEnter","handleOnMouseHover","onMouseLeave","opacity","cursor","rightAlign","type","React","Component","TypeMultiplierCell","editting","editValue","multiplierValue","edittable","e","newValue","target","value","toString","includes","select","onChange","keyCode","blur","linearValue","Math","log2","ratio","min","abs","partialHexComp","round","hexComp","length","Input","max","precision","autoFocus","onFocus","handleOnFocus","onBlur","handleOnBlur","onKeyDown","handleKeyPress","handleOnValueChange","defendingTypeNames","map","values","attackIndex","reduce","acc","currentVal","calculateBackgroundColor","mode","forceSingleModeWidth","handleOnClick","TypeChart","typesArr","types","innerIndex","onTypeMultiplierCellChange","Object","keys","paddingBottom","display","minWidth","fontSize","title","paddingTop","position","left","top","VerticalTypeCellMap","horizontalTypeMap","id","watermarkId","visibility","window","location","href","TypeCombo","containerRef","createRef","handleClickOutside","bind","isEditting","name","document","addEventListener","removeEventListener","event","current","contains","newName","newTypes","filter","_","concat","typeArr","ListGroupItem","padding","ref","Row","Col","sm","marginBottom","handleNameChange","disabled","handleTypeClick","Collapse","isOpen","onExiting","onEditted","marginLeft","marginRight","Button","onDelete","handleToggleEdit","TypeComboList","hasChanges","typeCombos","onSendChanges","newTypeCombos","typeCombo","i","block","handleTypeComboAdd","className","handleTypeComboEditted","handleTypeComboDelete","TypeField","deletable","onTypeNameChange","invalid","errorMessage","uniqueId","onColorChange","UncontrolledTooltip","placement","EditTypesChartModal","editTitle","editTypes","oldName","newTitle","test","newColor","newEditTypes","isValid","uniqueNames","Set","has","add","push","onSubmit","Modal","modalVisibility","backdrop","toggle","onOpened","handleRefreshForm","ModalHeader","handleEditTitleNameChanged","ModalBody","ListGroup","flush","editType","handleEditTypeNameChanged","handleEditTypeColorChanged","handleEditTypeDelete","handleEditTypeAdd","marginTop","ModalFooter","handleEditTypesSubmit","Presets","ImportTypeChartModal","importFile","selectedPreset","importFileError","newSelectedPreset","importedData","hasOwnProperty","Error","typeNames","forEach","Array","isArray","every","isNaN","Number","onImport","files","file","fileReader","FileReader","onload","text","result","JSON","parse","handleImportdata","message","onerror","error","readAsText","Card","body","CardTitle","tag","CardText","handlePresetSelected","preset","accept","handleFileUpload","handleImportFromFile","ExportTypeChartModal","includeTypeCombos","checked","exportComponentAsPNG","typeChartImageRef","fileName","replaceAll","html2CanvasOptions","letterRendering","scale","onclone","clone","getElementById","console","log","exportData","note","blob","Blob","stringify","saveAs","handleExportAsPNG","handleCheckboxChange","Label","for","handleExportAsJSON","App","edit","import","export","info","modalName","prev","editTypesForm","defendIndex","oldAttackIndex","indexOf","oldType","currentEditType","find","Navbar","dark","expand","NavbarBrand","navbar","Nav","NavItem","NavLink","handleModalToggle","NavbarText","handleTypeMultiplierCellChange","handleTypeComboListChanged","form","handleImport","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2397224b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { View, Text } from 'react-native';\r\n\r\nfunction DefendingTypeMap(typeLookup, typeName, index) {\r\n    return (\r\n        <th key={index}><div style={{ width: '40px', textAlign: 'left' }}><View style={{ height: '40px', width: '80px', paddingLeft: '5px', backgroundColor: typeLookup[typeName].color, borderRadius: 10, borderColor: '#CED4DA', borderWidth: 'thin', transform: [{ rotate: \"270deg\" }, { translateX: 20 }, { translateY: -20 }] }}><Text style={{ height: '40px', width: '70px', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', lineHeight: '40px', fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', textAlign: 'left', paddingLeft: '2px', paddingRight: '2px' }}>{typeName}</Text></View></div></th>\r\n    );\r\n}\r\n\r\nexport default DefendingTypeMap;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, Text } from 'react-native';\r\n\r\nclass HorizontalTypeCell extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hovering: false\r\n        }\r\n    }\r\n\r\n    handleOnMouseHover(hovering) {\r\n        if (this.props.hoverable) {\r\n            this.setState((state) => {\r\n                state.hovering = hovering;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnMouseClick() {\r\n        if (this.props.hoverable) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View key={this.props.type} onClick={() => this.handleOnMouseClick()} onMouseEnter={() => this.handleOnMouseHover(true)} onMouseLeave={() => this.handleOnMouseHover(false)} style={{ height: '40px', width: '80px', paddingLeft: '5px', backgroundColor: this.props.color, opacity: (this.props.opacity ? this.props.opacity : 1), borderRadius: 10, borderColor: '#CED4DA', borderWidth: 'thin', transform: [{ translateY: (this.state.hovering ? -2 : 0) }], cursor: (this.props.hoverable ? 'pointer' : '') }}><Text style={{ height: '40px', width: '70px', lineHeight: '40px', fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', textAlign: this.props.rightAlign ? 'right' : 'left', paddingLeft: '2px', paddingRight: '2px' }}>{this.props.type}</Text></View>\r\n        );\r\n    }\r\n}\r\n\r\nHorizontalTypeCell.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    opacity: PropTypes.number,\r\n    rightAlign: PropTypes.bool,\r\n    hoverable: PropTypes.bool,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default HorizontalTypeCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input } from 'reactstrap';\r\nimport { View } from 'react-native';\r\nimport { Textfit } from 'react-textfit';\r\n\r\n\r\nclass TypeMultiplierCell extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hovering: false,\r\n            editting: false,\r\n            editValue: 1\r\n        };\r\n    }\r\n\r\n    handleOnMouseHover(hovering) {\r\n        this.setState((state) => {\r\n            state.hovering = hovering;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleOnClick(multiplierValue) {\r\n        if (this.props.edittable) {\r\n            this.setState((state) => {\r\n                state.editting = true;\r\n                state.editValue = multiplierValue;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnValueChange(e) {\r\n        const newValue = e.target.value;\r\n        const valueString = newValue.toString();\r\n        if (!valueString.includes('-') && newValue >= 0) {\r\n            this.setState((state) => {\r\n                state.editValue = newValue;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleOnFocus(e) {\r\n        e.target.select();\r\n    }\r\n\r\n    handleOnBlur(e) {\r\n        this.props.onChange(e);\r\n        this.setState((state) => {\r\n            state.editting = false;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        // check for enter key press\r\n        if (e.keyCode === 13) {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    calculateBackgroundColor(multiplierValue) {\r\n        if (multiplierValue === 0) {\r\n            return '#646464';\r\n        }\r\n        else if (multiplierValue === 1) {\r\n            return '#E6E6FA';\r\n        }\r\n        else {\r\n            const linearValue = Math.log2(multiplierValue);\r\n            const linearMax = 2;\r\n\r\n            const ratio = 1 - Math.min(Math.abs(linearValue), linearMax) / linearMax;\r\n            const partialHexComp = Math.round(ratio * 255).toString(16);\r\n            const hexComp = partialHexComp.length > 1 ? partialHexComp : ('0' + partialHexComp);\r\n            if (linearValue < 0) {\r\n                return '#' + hexComp + 'FF' + hexComp;\r\n            }\r\n            else {\r\n                return '#FF' + hexComp + hexComp;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.edittable && this.state.editting) {\r\n            return (\r\n                <td><View style={{ height: '40px', width: '40px' }}><Input type='number' min={0} max={99} precision={2} autoFocus onFocus={(e) => this.handleOnFocus(e)} onBlur={(e) => this.handleOnBlur(e)} onKeyDown={(e) => this.handleKeyPress(e)} onMouseEnter={() => this.handleOnMouseHover(true)} onMouseLeave={() => this.handleOnMouseHover(false)} style={{ height: '40px', width: '40px', lineHeight: '40px', textAlign: 'center', paddingLeft: '0', paddingRight: '0' }} value={this.state.editValue} onChange={(e) => this.handleOnValueChange(e)} /></View></td>\r\n            );\r\n        }\r\n        else {\r\n            const multiplierValue = this.props.defendingTypeNames.map((type) => this.props.typeLookup[type].values[this.props.attackIndex]).reduce((acc, currentVal) => acc * currentVal, 1);\r\n            const backgroundColor = this.calculateBackgroundColor(multiplierValue);\r\n            return (\r\n                <td><View onMouseEnter={() => this.handleOnMouseHover(true)} onMouseLeave={() => this.handleOnMouseHover(false)} style={{ height: '40px', width: '40px' }}><Textfit mode=\"single\" forceSingleModeWidth={false} max={20} onClick={() => this.handleOnClick(multiplierValue)} style={{ height: '40px', width: '40px', lineHeight: '40px', fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', backgroundColor: backgroundColor, borderRadius: ((this.props.edittable && this.state.hovering) ? 0 : 10), textAlign: 'center', cursor: (this.props.edittable ? 'pointer' : '')}}>{multiplierValue}</Textfit></View></td>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nTypeMultiplierCell.propTypes = {\r\n    defendingTypeNames: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    attackIndex: PropTypes.number.isRequired,\r\n    typeLookup: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    edittable: PropTypes.bool,\r\n    onChange: PropTypes.func\r\n};\r\n\r\nexport default TypeMultiplierCell;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { View, Text } from 'react-native';\r\nimport VerticalTypeCellMap from './VerticalTypeCellMap';\r\nimport HorizontalTypeCell from './HorizontalTypeCell';\r\nimport TypeMultiplierCell from './TypeMultiplierCell';\r\n\r\n\r\nclass TypeChart extends React.Component {\r\n    horizontalTypeMap(typesArr, typeName, index) {\r\n        return (\r\n            <tr key={typeName + index}>\r\n                <td>\r\n                    <HorizontalTypeCell type={typeName} color={this.props.types[typeName].color} rightAlign={true} />\r\n                </td>\r\n                {typesArr.map((typeName, innerIndex) => (<TypeMultiplierCell key={index + \"_\" + innerIndex} typeLookup={this.props.types} defendingTypeNames={[typesArr[innerIndex]]} attackIndex={index} edittable={true} onChange={(e) => this.props.onTypeMultiplierCellChange(e, typesArr[innerIndex], index)} />))}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const typesArr = Object.keys(this.props.types);\r\n\r\n        return (\r\n            <div>\r\n                <Text style={{ paddingBottom: '10px', display: 'inherit', textAlign: 'center', width: 0, minWidth: '100%', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', fontSize: 'x-large', fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF' }}>{this.props.title}</Text>\r\n                <div style={{ paddingLeft: '115px' }}>\r\n                    <h6>\r\n                        <Text style={{ fontSize: 20, fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', }}>\r\n                            Defending Type\r\n                        </Text>\r\n                    </h6>\r\n                    <View style={{ paddingTop: '40px', transform: [{ translateX: -40 }] }}>\r\n                        <View style={{ position: 'absolute', left: 'auto', paddingTop: '45px', top: '50%', transform: [{ rotate: '270deg' }, {translateY: '-115px'}] }}>\r\n                            <h6>\r\n                                <Text style={{ fontSize: 20, fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF', }}>\r\n                                    Attacking Type\r\n                                </Text>\r\n                            </h6>\r\n                        </View>\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <td />\r\n                                    {typesArr.map((typeName, index) => VerticalTypeCellMap(this.props.types, typeName, index))}\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {typesArr.map((typeName, index) => this.horizontalTypeMap(typesArr, typeName, index))}\r\n                            </tbody>\r\n                        </table>\r\n                    </View>\r\n                </div>\r\n                <div id={this.props.watermarkId} style={{ visibility: 'hidden' }}>\r\n                    <Text style={{ paddingTop: '30px', paddingRight: '2px', paddingBottom: '2px', fontSize: '10px', display: 'block', textAlign: 'end' }}>Made with TypeCharts ({window.location.href})</Text>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTypeChart.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    types: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    onTypeMultiplierCellChange: PropTypes.func.isRequired,\r\n    watermarkId: PropTypes.string\r\n}\r\n\r\nexport default TypeChart;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Input, Row, Col, ListGroupItem, Button, Collapse } from 'reactstrap';\r\nimport VerticalTypeCellMap from './VerticalTypeCellMap';\r\nimport TypeMultiplierCell from './TypeMultiplierCell';\r\nimport HorizontalTypeCell from './HorizontalTypeCell';\r\nimport { BsFillTrashFill } from 'react-icons/bs';\r\nimport { BiEditAlt } from 'react-icons/bi';\r\n\r\n\r\nclass TypeCombo extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.containerRef = React.createRef();\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n\r\n        this.state = {\r\n            isEditting: false,\r\n            name: '',\r\n            types: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    handleClickOutside(event) {\r\n        if (this.state.isEditting && this.containerRef && !this.containerRef.current.contains(event.target)) {\r\n            this.setState((state) => {\r\n                state.isEditting = false;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleToggleEdit() {\r\n        const isEditting = !this.state.isEditting; // TODO: update to match props\r\n        this.setState((state) => {\r\n            state.isEditting = isEditting;\r\n            if (isEditting) {\r\n                state.name = this.props.name;\r\n                state.types = this.props.types;\r\n            }\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        const newName = e.target.value;\r\n        this.setState((state) => {\r\n            state.name = newName;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleTypeClick(typeName) {\r\n        const newTypes = this.state.types.includes(typeName) ?\r\n            this.state.types.filter((_) => _ !== typeName) :\r\n            this.state.types.concat(typeName);\r\n\r\n        this.setState((state) => {\r\n            state.types = newTypes;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const typeArr = Object.keys(this.props.typeLookup);\r\n        return (\r\n            <ListGroupItem style={{ padding: 0 }}>\r\n                <div ref={this.containerRef} style={{ paddingTop: '2%', paddingBottom: '2%', paddingLeft: '4%', paddingRight: '3%' }}>\r\n                    <Row>\r\n                        <Col sm={11}>\r\n                            <Row style={{ marginBottom: '1%' }}>\r\n                                <Col sm={4} style={{ paddingLeft: 0, paddingRight: '1%' }}>\r\n                                    {/*<Textfit mode=\"single\" forceSingleModeWidth={false} style={{ fontWeight: 'bold', textShadow: '-1px 1px 2px #000, 1px 1px 2px #000, 1px -1px 2px #000, -1px -1px 2px #000', color: '#FFFFFF' }}>{this.props.name}</Textfit>*/}\r\n                                    <Input type=\"text\" value={this.state.isEditting ? this.state.name : this.props.name} onChange={(e) => this.handleNameChange(e)} disabled={!this.state.isEditting} />\r\n                                </Col>\r\n                                <Col sm={8}>\r\n                                    <Row>\r\n                                        {(this.state.isEditting ? this.state.types : this.props.types).map((typeName) => (<HorizontalTypeCell key={typeName} type={typeName} color={this.props.typeLookup[typeName].color} onClick={() => this.handleTypeClick(typeName)} hoverable={this.state.isEditting} />))}\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                            <Collapse isOpen={this.state.isEditting} onExiting={() => this.props.onEditted(this.state.name, this.state.types)}>\r\n                                <Row style={{ marginLeft: '5%', marginRight: '5%', marginBottom: '2%' }}>\r\n                                    {Object.keys(this.props.typeLookup).map((typeName) => (<HorizontalTypeCell key={typeName} type={typeName} color={this.props.typeLookup[typeName].color} onClick={() => this.handleTypeClick(typeName)} opacity={this.state.types.includes(typeName) ? 0.25 : 1} hoverable={!this.state.types.includes(typeName)} />))}\r\n                                </Row>\r\n                            </Collapse>\r\n                            <Row style={{ paddingTop: '40px' }}>\r\n                                <table>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            {typeArr.map((typeName, index) => VerticalTypeCellMap(this.props.typeLookup, typeName, index))}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            {typeArr.map((typeName, index) => (<TypeMultiplierCell key={typeName} typeLookup={this.props.typeLookup} defendingTypeNames={this.state.isEditting ? this.state.types : this.props.types} attackIndex={index} edittable={false} />))}\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col>\r\n                            <Row>\r\n                                <Button color=\"danger\" onClick={() => this.props.onDelete()}><BsFillTrashFill /></Button>\r\n                                <Button color=\"info\" onClick={() => this.handleToggleEdit()}><BiEditAlt /></Button>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </ListGroupItem>\r\n            );\r\n    }\r\n}\r\n\r\nTypeCombo.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    typeLookup: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    onEditted: PropTypes.func,\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nexport default TypeCombo;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'reactstrap';\r\nimport TypeCombo from './TypeCombo';\r\n\r\nclass TypeComboList extends React.Component { // TODO: add ability to switch from defense node to offense node\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.containerRef = React.createRef();\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n        this.hasChanges = false;\r\n\r\n        this.state = {\r\n            typeCombos: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    handleClickOutside(event) {\r\n        if (this.hasChanges && this.containerRef && !this.containerRef.current.contains(event.target)) {\r\n            const typeCombos = this.state.typeCombos;\r\n            this.hasChanges = false;\r\n            this.props.onSendChanges(typeCombos);\r\n            this.setState((state) => {\r\n                state.typeCombos = null;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleTypeComboAdd() {\r\n        const newTypeCombos = [{\r\n            name: '',\r\n            types: []\r\n        }].concat(this.hasChanges ? this.state.typeCombos : this.props.typeCombos);\r\n\r\n        this.hasChanges = true;\r\n\r\n        this.setState((state) => {\r\n            state.typeCombos = newTypeCombos;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleTypeComboEditted(index, name, types) {\r\n        const newTypeCombos = (this.hasChanges ? this.state.typeCombos : this.props.typeCombos).map((typeCombo, i) => {\r\n            if (i === index) {\r\n                return {\r\n                    name: name,\r\n                    types: types\r\n                };\r\n            }\r\n            else {\r\n                return typeCombo;\r\n            }\r\n        });\r\n\r\n        this.hasChanges = true;\r\n\r\n        this.setState((state) => {\r\n            state.typeCombos = newTypeCombos;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleTypeComboDelete(index) {\r\n        const newTypeCombos = (this.hasChanges ? this.state.typeCombos : this.props.typeCombos).filter((_, i) => i !== index);\r\n\r\n        this.hasChanges = true;\r\n\r\n        this.setState((state) => {\r\n            state.typeCombos = newTypeCombos;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={this.containerRef}>\r\n                <Button color=\"success\" block onClick={() => this.handleTypeComboAdd()} style={{ marginBottom: '1%' }}>New Type Combo</Button>\r\n                <div className=\"list-group\">\r\n                    {(this.hasChanges ? this.state.typeCombos : this.props.typeCombos).map((typeCombo, index) => (<TypeCombo key={index} typeLookup={this.props.typeLookup} name={typeCombo.name} types={typeCombo.types} onEditted={(name, types) => this.handleTypeComboEditted(index, name, types)} onDelete={() => this.handleTypeComboDelete(index)} />))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTypeComboList.propTypes = {\r\n    typeLookup: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    typeCombos: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        types: PropTypes.arrayOf(PropTypes.string).isRequired\r\n    })).isRequired,\r\n    onSendChanges: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TypeComboList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Input, ListGroupItem, Button, UncontrolledTooltip } from 'reactstrap';\r\nimport HorizontalTypeCell from './HorizontalTypeCell';\r\nimport { BsFillTrashFill } from 'react-icons/bs';\r\n\r\n\r\nfunction TypeField(props) {\r\n    return (\r\n        <ListGroupItem style={{ paddingLeft: '0%' }}>\r\n            <Row>\r\n                <Col sm={2} style={{ paddingLeft: '5%', visibility: (props.deletable ? 'visible' : 'hidden') }}><Button color=\"danger\" onClick={props.deletable ? props.onDelete : null}><BsFillTrashFill /></Button></Col>\r\n                <Col sm={6} style={{ paddingRight: '1%' }}><Input value={props.typeName} onChange={props.onTypeNameChange} invalid={props.errorMessage.length > 0} id={\"typeFieldId\" + props.uniqueId} /></Col>\r\n                <Col sm={1} style={{ paddingRight: 0, paddingLeft: '1%' }}><Input type=\"color\" value={props.color} onChange={props.onColorChange} style={{ padding: '5%', cursor: 'pointer' }} /></Col>\r\n                <Col sm={3} style={{ paddingLeft: '8%' }} ><HorizontalTypeCell type={props.typeName} color={props.color} /></Col>\r\n            </Row>\r\n            { props.errorMessage && props.errorMessage.length > 0 &&\r\n                <UncontrolledTooltip placement=\"bottom\" target={\"typeFieldId\" + props.uniqueId}>{props.errorMessage}</UncontrolledTooltip>\r\n            }\r\n        </ListGroupItem>\r\n    );\r\n}\r\n\r\nTypeField.propTypes = {\r\n    uniqueId: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]),\r\n    typeName: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    deletable: PropTypes.bool,\r\n    errorMessage: PropTypes.string,\r\n    onTypeNameChange: PropTypes.func,\r\n    onColorChange: PropTypes.func,\r\n    onDelete: PropTypes.func\r\n};\r\n\r\nexport default TypeField;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, ListGroup } from 'reactstrap';\r\nimport TypeField from './TypeField';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nclass EditTypesChartModal extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            editTitle: '',\r\n            editTypes: []\r\n        };\r\n    }\r\n\r\n    handleRefreshForm() {\r\n        const editTitle = this.props.title;\r\n        this.setState((state) => {\r\n            state.editTitle = editTitle;\r\n            state.editTypes = Object.keys(this.props.types).map((typeName) => {\r\n                return {\r\n                    oldName: typeName,\r\n                    newName: typeName,\r\n                    color: this.props.types[typeName].color,\r\n                    errorMessage: ''\r\n                }\r\n            });\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleEditTitleNameChanged(e) {\r\n        const newTitle = e.target.value;\r\n        this.setState((state) => {\r\n            state.editTitle = newTitle;\r\n            return state;\r\n        })\r\n    }\r\n\r\n    handleEditTypeNameChanged(e, index) {\r\n        const newName = e.target.value;\r\n\r\n        if (/^[a-zA-Z]/.test(newName) || newName.length <= 0) {\r\n            this.setState((state) => {\r\n                state.editTypes[index].newName = newName;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleEditTypeColorChanged(e, index) {\r\n        const newColor = e.target.value;\r\n\r\n        this.setState((state) => {\r\n            state.editTypes[index].color = newColor;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleEditTypeAdd() {\r\n        const newEditTypes = this.state.editTypes.concat({\r\n            oldName: '',\r\n            newName: '',\r\n            color: '#FFFFFF',\r\n            errorMessage: ''\r\n        });\r\n        this.setState((state) => {\r\n            state.editTypes = newEditTypes;\r\n            return state;\r\n        })\r\n    }\r\n\r\n    handleEditTypeDelete(index) {\r\n        if (this.state.editTypes.length > 1) {\r\n            const newEditTypes = this.state.editTypes.filter((_, i) => i !== index);\r\n            this.setState((state) => {\r\n                state.editTypes = newEditTypes;\r\n                return state;\r\n            });\r\n        }\r\n    }\r\n\r\n    handleEditTypesSubmit() {\r\n        // validation for blank or duplicate names\r\n        const newEditTypes = [];\r\n        let isValid = true;\r\n        const uniqueNames = new Set();\r\n        for (let i = 0; i < this.state.editTypes.length; ++i) {\r\n            let errorMessage = '';\r\n            if (this.state.editTypes[i].newName.length <= 0) {\r\n                isValid = false;\r\n                errorMessage = 'Name cannot be blank';\r\n            } else if (uniqueNames.has(this.state.editTypes[i].newName)) {\r\n                isValid = false;\r\n                errorMessage = 'Type \"' + this.state.editTypes[i].newName + '\" already exists';\r\n            } else {\r\n                uniqueNames.add(this.state.editTypes[i].newName);\r\n            }\r\n            newEditTypes.push({\r\n                oldName: this.state.editTypes[i].oldName,\r\n                newName: this.state.editTypes[i].newName,\r\n                color: this.state.editTypes[i].color,\r\n                errorMessage: errorMessage\r\n            })\r\n        }\r\n        if (!isValid) {\r\n            this.setState((state) => {\r\n                state.editTypes = newEditTypes;\r\n                return state;\r\n            });\r\n        }\r\n        else {\r\n            this.props.onSubmit(this.state);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal isOpen={this.props.modalVisibility} backdrop=\"static\" toggle={() => this.props.toggle()} onOpened={() => this.handleRefreshForm()}>\r\n                <ModalHeader toggle={() => this.props.toggle()}>\r\n                    <Input id=\"title\" type=\"text\" onChange={(e) => this.handleEditTitleNameChanged(e)} value={this.state.editTitle} />\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <ListGroup flush>\r\n                        {this.state.editTypes.map((editType, index) => (<TypeField key={index} uniqueId={index} typeName={editType.newName} color={editType.color} deletable={ this.state.editTypes.length > 2} errorMessage={editType.errorMessage} onTypeNameChange={(e) => this.handleEditTypeNameChanged(e, index)} onColorChange={(e) => this.handleEditTypeColorChanged(e, index)} onDelete={() => this.handleEditTypeDelete(index)} />))}\r\n                    </ListGroup>\r\n                    <Button color=\"success\" block onClick={() => this.handleEditTypeAdd()} style={{ marginTop: '2%' }}><FaPlus /></Button>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"success\" onClick={() => this.handleEditTypesSubmit()}>Save</Button>\r\n                    <Button color=\"danger\" onClick={() => this.props.toggle()}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nEditTypesChartModal.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    types: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    modalVisibility: PropTypes.bool.isRequired,\r\n    onSubmit: PropTypes.func.isRequired,\r\n    toggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default EditTypesChartModal;","import * as pokemon from './Pokemon.tych.json';\r\nimport * as temtem from './Temtem.tych.json';\r\n\r\nexport const Presets = [\r\n    pokemon.default,\r\n    temtem.default\r\n]","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, Card, CardTitle, CardText } from 'reactstrap';\r\nimport { Presets } from \"presets\";\r\n\r\n\r\nclass ImportTypeChartModal extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.importFile = null;\r\n\r\n        this.state = {\r\n            selectedPreset: 0,\r\n            importFileError: ''\r\n        };\r\n    }\r\n\r\n    handleRefreshForm() {\r\n        this.importFile = null;\r\n        this.setState((state) => {\r\n            state.importFileError = '';\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handlePresetSelected(e) {\r\n        const newSelectedPreset = e.target.value;\r\n        this.setState((state) => {\r\n            state.selectedPreset = newSelectedPreset;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleImportdata(importedData) {\r\n        // check for title\r\n        if (!importedData.hasOwnProperty(\"title\")) {\r\n            throw new Error('Missing or invalid title');\r\n        }\r\n        // check for types\r\n        else if (importedData.hasOwnProperty(\"types\")) {\r\n            const typeNames = Object.keys(importedData.types);\r\n            typeNames.forEach((typeName) => {\r\n                // check for valid type name\r\n                if (!/^[a-zA-Z]/.test(typeName)) {\r\n                    throw new Error('Invalid type: ' + typeName);\r\n                }\r\n                // check for valid object structure\r\n                else if (!(typeof importedData.types[typeName] === 'object' && importedData.types[typeName] !== null)) {\r\n                    throw new Error('Invalid or missing type body: ' + typeName);\r\n                }\r\n                // check for valid color\r\n                else if (!importedData.types[typeName].hasOwnProperty(\"color\") || !/^#[0-9A-Fa-f]{6}$/i.test(importedData.types[typeName].color)) {\r\n                    throw new Error('Invalid or missing color');\r\n                }\r\n                // check for valid values\r\n                else if (!(importedData.types[typeName].hasOwnProperty(\"values\") && Array.isArray(importedData.types[typeName].values) &&\r\n                    importedData.types[typeName].values.length === typeNames.length &&\r\n                    importedData.types[typeName].values.every((value) => !isNaN(value) && Number(value) >= 0))) {\r\n                    throw new Error('Invalid or missing values');\r\n                }\r\n            });\r\n            // check for typeCombos\r\n            if (importedData.hasOwnProperty(\"typeCombos\") && Array.isArray(importedData.typeCombos) &&\r\n                importedData.typeCombos.every((typeCombo) => typeof typeCombo === 'object' && typeCombo !== null &&\r\n                    typeCombo.hasOwnProperty(\"name\") &&\r\n                    typeCombo.hasOwnProperty(\"types\") && Array.isArray(typeCombo.types) && typeCombo.types.every((typeName) => typeNames.includes(typeName)))) {\r\n                // finally import data\r\n                this.props.onImport(importedData.title, importedData.types, importedData.typeCombos);\r\n                this.importFile = null;\r\n                this.setState((state) => {\r\n                    state.importFileError = \"\";\r\n                    return state;\r\n                });\r\n            }\r\n            else {\r\n                throw new Error('invalid or missing typeCombos');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Missing types');\r\n        }\r\n    }\r\n\r\n    handleFileUpload(e) {\r\n        this.importFile = e.target.files[0];\r\n        this.setState((state) => {\r\n            state.importFileError = \"\";\r\n            return state;\r\n        })\r\n    }\r\n\r\n    handleImportFromFile() {\r\n        if (!this.importFile) {\r\n            this.setState((state) => {\r\n                state.importFileError = \"You must upload a file to import!\";\r\n                return state;\r\n            })\r\n        }\r\n        else {\r\n            const file = this.importFile;\r\n            const fileReader = new FileReader();\r\n            fileReader.onload = (e) => {\r\n                const text = e.target.result;\r\n                try {\r\n                    // parse to JSON\r\n                    const importedData = JSON.parse(text);\r\n                    this.handleImportdata(importedData);\r\n                }\r\n                catch (e) {\r\n                    this.importFile = null;\r\n                    this.setState((state) => {\r\n                        state.importFileError = \"Error parsing file: \" + e.message;\r\n                        return state;\r\n                    })\r\n                }\r\n            }\r\n            fileReader.onerror = (e) => {\r\n                this.importFile = null;\r\n                this.setState((state) => {\r\n                    state.importFileError = \"Error reading file: \" + fileReader.error;\r\n                    return state;\r\n                });\r\n            }\r\n            try {\r\n                fileReader.readAsText(file, \"UTF-8\");\r\n            }\r\n            catch (e) {\r\n                this.importFile = null;\r\n                this.setState((state) => {\r\n                    state.importFileError = \"An unexpected error occurred. Please try again.\";\r\n                    return state;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal isOpen={this.props.modalVisibility} backdrop=\"static\" toggle={() => this.props.toggle()} onOpened={() => this.handleRefreshForm()}>\r\n                <ModalHeader toggle={() => this.props.toggle()}>\r\n                    Import Type Chart\r\n                    </ModalHeader>\r\n                <ModalBody>\r\n                    <Card body style={{ marginBottom: '2%' }}>\r\n                        <CardTitle tag=\"h4\">Import from Preset</CardTitle>\r\n                        <CardText>Import a premade type chart to view and customize.</CardText>\r\n                        <CardText>\r\n                            <Input type=\"select\" value={this.state.selectedPreset} onChange={(e) => this.handlePresetSelected(e)} style={{ width: '50%' }}>\r\n                                {Presets.map((preset, index) => (<option key={index} value={index}>{preset.title}</option>))}\r\n                            </Input>\r\n                        </CardText>\r\n                        <Button color=\"success\" onClick={() => this.handleImportdata(Presets[this.state.selectedPreset])}>Import</Button>\r\n                    </Card>\r\n                    <Card body>\r\n                        <CardTitle tag=\"h4\">Import from JSON</CardTitle>\r\n                        <CardText>Import a previously created type chart from a JSON file.</CardText>\r\n                        <CardText><Input type=\"file\" accept=\".tych.json\" onChange={(e) => this.handleFileUpload(e)} /><span style={{ color: '#FF0000', display: 'inline-block' }}>{this.state.importFileError}</span></CardText>\r\n                        <Button color=\"success\" onClick={() => this.handleImportFromFile()}>Import</Button>\r\n                    </Card>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"danger\" onClick={() => this.props.toggle()}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nImportTypeChartModal.propTypes = {\r\n    onImport: PropTypes.func.isRequired,\r\n    modalVisibility: PropTypes.bool.isRequired,\r\n    toggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ImportTypeChartModal;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, Card, CardTitle, CardText, Label } from 'reactstrap';\r\nimport { exportComponentAsPNG } from 'react-component-export-image';\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\nclass ExportTypeChartModal extends React.Component {\r\n\r\n    constructor() { // TODO: include url with png export\r\n        super();\r\n        this.state = {\r\n            includeTypeCombos: false\r\n        };\r\n    }\r\n\r\n    handleCheckboxChange(e) {\r\n        const checked = e.target.checked;\r\n        this.setState((state) => {\r\n            state.includeTypeCombos = checked;\r\n            return state;\r\n        });\r\n    }\r\n\r\n    handleExportAsPNG() {\r\n        exportComponentAsPNG(this.props.typeChartImageRef, {\r\n            fileName: this.props.title.replaceAll(' ', '-'), html2CanvasOptions: {\r\n                letterRendering: true, scale: 2, backgroundColor: 'azure', onclone: (clone) => {\r\n                    clone.getElementById(this.props.watermarkId).style.visibility = \"visible\";\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleExportAsJSON() {\r\n        console.log('exporting as json');\r\n        const exportData = {\r\n            title: this.props.title,\r\n            types: this.props.types,\r\n            typeCombos: (this.state.includeTypeCombos ? this.props.typeCombos : []),\r\n            note: \"You can import this file to \" + window.location.href + \" to view its contents\"\r\n        }\r\n        const blob = new Blob([JSON.stringify(exportData)], { type: \"application/json;charset=utf-8\" });\r\n        saveAs(blob, this.props.title.replaceAll(' ', '-') + \".tych.json\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal isOpen={this.props.modalVisibility} backdrop=\"static\" toggle={() => this.props.toggle()}>\r\n                <ModalHeader toggle={() => this.props.toggle()}>\r\n                    Export Type Chart\r\n                    </ModalHeader>\r\n                <ModalBody>\r\n                    <Card body style={{ marginBottom: '2%' }}>\r\n                        <CardTitle tag=\"h4\">Export as PNG</CardTitle>\r\n                        <CardText>Export as an image to store or share. Note that PNGs cannot be imported to edit in the future.</CardText>\r\n                        <CardText />\r\n                        <Button color=\"success\" onClick={() => this.handleExportAsPNG()}>Export</Button>\r\n                    </Card>\r\n                    <Card body>\r\n                        <CardTitle tag=\"h4\">Export as JSON</CardTitle>\r\n                        <CardText>Export as metadata to store for later use. This file can be imported in the future to view and edit from this site.</CardText>\r\n                        <CardText><Input type=\"checkbox\" id=\"check\" onChange={(e) => this.handleCheckboxChange(e)} checked={this\r\n                            .includeTypeCombos} style={{ marginLeft: 'inherit' }} /><Label for=\"check\" style={{ marginLeft: '5%' }}>Include Type Combos</Label></CardText>\r\n                        <Button color=\"success\" onClick={() => this.handleExportAsJSON()}>Export</Button>\r\n                    </Card>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"danger\" onClick={() => this.props.toggle()}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nExportTypeChartModal.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    types: PropTypes.objectOf(PropTypes.shape({\r\n        color: PropTypes.string.isRequired,\r\n        values: PropTypes.arrayOf(PropTypes.oneOfType([\r\n            PropTypes.number,\r\n            PropTypes.string\r\n        ])).isRequired\r\n    })).isRequired,\r\n    typeCombos: PropTypes.arrayOf(PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        types: PropTypes.arrayOf(PropTypes.string).isRequired\r\n    })).isRequired,\r\n    typeChartImageRef: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.shape({\r\n            current: PropTypes.any\r\n        })\r\n    ]).isRequired,\r\n    modalVisibility: PropTypes.bool.isRequired,\r\n    toggle: PropTypes.func.isRequired,\r\n    watermarkId: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ExportTypeChartModal;","import 'App.css';\nimport React from 'react';\nimport { Row, Col, Button, Collapse, Navbar, NavbarBrand, Nav, NavItem, NavLink, NavbarText, Modal, ModalBody } from 'reactstrap';\nimport { View } from 'react-native';\nimport TypeChart from 'components/TypeChart';\nimport TypeComboList from 'components/TypeComboList';\nimport EditTypesChartModal from 'components/EditTypesChartModal';\nimport ImportTypeChartModal from 'components/ImportTypeChartModal';\nimport ExportTypeChartModal from 'components/ExportTypeChartModal';\nimport { BiEditAlt } from 'react-icons/bi';\nimport { AiOutlineExport, AiOutlineImport } from 'react-icons/ai';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        if (window.location.href.includes('?')) {\n            window.location.href = '/';\r\n        }\n\n        this.typeChartImageRef = React.createRef();\n        this.watermarkId = \"TypeChartWatermark\";\n\n        this.state = {\n            modalVisibility: {\n                edit: false,\n                import: false,\n                export: false,\n                info: false\n            },\n            title: 'Software Engineering',\n            types: {\n                'Human': { color: '#C77B3D', values: [2, 1, 2, 1, 2, 2] },\n                'Bug': { color: '#86FF24', values: [2, 0.5, 1, 1, 1, 0.5] },\n                'Tech': { color: '#B6CDC6', values: [0.5, 2, 2, 2, 0, 0] },\n                'Coder': { color: '#00F010', values: [1, 2, 0.5, 0.5, 2, 0] },\n                'Meeting': { color: '#E60000', values: [0.5, 0.5, 2, 0.5, 0.5, 1] },\n                'Sleep': { color: '#3D3D3D', values: [0.5, 2, 1, 2, 0.5, 2] }\n            },\n            typeCombos: [\n                {\n                    name: 'Programmer',\n                    types: [\n                        'Human',\n                        'Coder'\n                    ]\n                }\n            ]\n        }\n    }\n\n    handleTypeMultiplierCellChange(e, typeName, attackIndex) {\n        const newValue = e.target.value;\n        this.setState((state) => {\n            state.types[typeName].values[attackIndex] = newValue;\n            return state;\n        });\n    }\n\n    handleModalToggle(modalName) {\n        const prev = this.state.modalVisibility[modalName];\n        this.setState((state) => {\n            state.modalVisibility[modalName] = !prev;\n            return state;\n        });\n    }\n\n    handleEditTypesSubmit(editTypesForm) {\n        const newTitle = editTypesForm.editTitle;\n        // construct type chart and fix any new type refs\n        const newTypes = {};\n        for (let defendIndex = 0; defendIndex < editTypesForm.editTypes.length; ++defendIndex) {\n            newTypes[editTypesForm.editTypes[defendIndex].newName] = {\n                color: editTypesForm.editTypes[defendIndex].color,\n                values: []\n            };\n            for (let attackIndex = 0; attackIndex < editTypesForm.editTypes.length; ++attackIndex) {\n                if (editTypesForm.editTypes[defendIndex].oldName.length <= 0 || editTypesForm.editTypes[attackIndex].oldName.length <= 0) {\n                    newTypes[editTypesForm.editTypes[defendIndex].newName].values.push(1);\n                }\n                else {\n                    const oldAttackIndex = Object.keys(this.state.types).indexOf(editTypesForm.editTypes[attackIndex].oldName);\n                    newTypes[editTypesForm.editTypes[defendIndex].newName].values.push(this.state.types[editTypesForm.editTypes[defendIndex].oldName].values[oldAttackIndex]);\n                }\n            }\n        }\n        // update refs for type combos, and remove refs to deleted types\n        const newTypeCombos = [];\n        for (let i = 0; i < this.state.typeCombos.length; ++i) {\n            const typeCombo = {\n                name: this.state.typeCombos[i].name,\n                types: []\n            };\n            this.state.typeCombos[i].types.forEach((oldType) => {\n                const currentEditType = editTypesForm.editTypes.find((editType) => editType.oldName === oldType);\n                if (currentEditType) {\n                    typeCombo.types.push(currentEditType.newName);\n                }\n            });\n            newTypeCombos.push(typeCombo);\n        }\n        this.setState((state) => {\n            state.title = newTitle;\n            state.types = newTypes;\n            state.typeCombos = newTypeCombos;\n            state.modalVisibility.edit = false;\n            return state;\n        });\n    }\n\n    handleTypeComboListChanged(typeCombos) {\n        this.setState((state) => {\n            state.typeCombos = typeCombos;\n            return state;\n        });\n    }\n\n    handleImport(title, types, typeCombos) {\n        this.setState((state) => {\n            state.title = title;\n            state.types = types;\n            state.typeCombos = typeCombos;\n            state.modalVisibility.import = false;\n            return state;\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar color=\"dark\" dark expand=\"md\">\n                    <NavbarBrand href=\"/\">TypeCharts</NavbarBrand>\n                    <Collapse navbar>\n                        <Nav className=\"mr-auto\" navbar>\n                            <NavItem>\n                                <NavLink onClick={() => this.handleModalToggle('info')} style={{ cursor: 'pointer' }}>Info</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/mlaikhram/type-chart-builder\" target=\"_blank\">GitHub</NavLink>\n                            </NavItem>\n                        </Nav>\n                        <NavbarText>Made by Matthew Laikhram</NavbarText>\n                    </Collapse>\n                </Navbar>\n                <div className=\"container-fluid\">\n                    <Row style={{ paddingTop: '40px' }}>\n                        <Col style={{ paddingLeft: '3%', paddingBottom: '5%' }}>\n                            <Row>\n                                <TypeChart ref={this.typeChartImageRef} title={this.state.title} types={this.state.types} onTypeMultiplierCellChange={(e, typeName, attackIndex) => this.handleTypeMultiplierCellChange(e, typeName, attackIndex)} watermarkId={this.watermarkId} />\n                            </Row>\n                            <View style={{ display: 'inherit', transform: [{translateY: '-40px'}] }}>\n                                <Row style={{ paddingLeft: '75px' }}>\n                                    <Button color=\"info\" onClick={() => this.handleModalToggle('edit')}><BiEditAlt /></Button>\n                                    <Button color=\"primary\" onClick={() => this.handleModalToggle('import')}><AiOutlineImport /></Button>\n                                    <Button color=\"success\" onClick={() => this.handleModalToggle('export')}><AiOutlineExport /></Button>\n                                </Row>\n                            </View>\n                        </Col>\n                        <Col>\n                            <TypeComboList typeLookup={this.state.types} typeCombos={this.state.typeCombos} onSendChanges={(typeCombos) => this.handleTypeComboListChanged(typeCombos)} />\n                        </Col>\n                    </Row>\n                    <EditTypesChartModal title={this.state.title} types={this.state.types} modalVisibility={this.state.modalVisibility.edit} toggle={() => this.handleModalToggle('edit')} onSubmit={(form) => this.handleEditTypesSubmit(form)} />\n                    <ImportTypeChartModal onImport={(title, types, typeCombos) => this.handleImport(title, types, typeCombos)} modalVisibility={this.state.modalVisibility.import} toggle={() => this.handleModalToggle('import')} />\n                    <ExportTypeChartModal title={this.state.title} types={this.state.types} typeCombos={this.state.typeCombos} typeChartImageRef={this.typeChartImageRef} modalVisibility={this.state.modalVisibility.export} toggle={() => this.handleModalToggle('export')} watermarkId={this.watermarkId} />\n                    <Modal isOpen={this.state.modalVisibility.info} toggle={() => this.handleModalToggle('info')}>\n                        <ModalBody>\n                            <h5>What is TypeCharts?</h5>\n                            <p>\n                                Typecharts is a sandbox for gamers and designers to experiment with Type Charts \n                                and type combinations either for existing games or for the purpose of building \n                                a game that utilizes the Type Chart as a combat mechanic.\n                            </p>\n                            <h5>What can I do in TypeCharts?</h5>\n                            <p>\n                                TypeCharts allows you to customize your Type Chart by editting the values directly \n                                in each cell and by using the various options listed below:\n                            </p>\n                            <ul>\n                                <li>\n                                    <BiEditAlt />Edit: Modify the title and types displayed in the Type Chart\n                                </li>\n                                <li>\n                                    <AiOutlineImport />Import: Load an existing Type Chart from one of the presets\n                                    available, or from a previously exported file\n                                </li>\n                                <li>\n                                    <AiOutlineExport />Export: Save your Type Chart as an image or as a tych.json\n                                    file, which can be re-imported for later use\n                                </li>\n                            </ul>\n                            <p>\n                                With TypeCharts, you can also test out your creation by adding Type Combos using\n                                the <b>New Type Combo</b> button. Each Type Combo allows you to add a name and one \n                                or more types, which it will then use to calculate your combo's stats. This can help \n                                you determine which type combos are best for your strategy, or in a designer's case \n                                it could help determine if your type chart needs tweaking based on under/overtuned \n                                combinations.\n                            </p>\n                            <h5>Upcoming Features</h5>\n                            <p>\n                                While TypeCharts is currently geared toward defensive typing analysis, there are \n                                plans to implement a feature for analysing offensive type combinations as well. \n                                Look out for more updates on that!\n                            </p>\n                            <p>\n                                There are also various QoL updates being looked into, including a visual indicator to \n                                help more quickly determine which two types intersect with the Type Chart cell you are \n                                currently hovering over.\n                            </p>\n                        </ModalBody>\n                    </Modal>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}